import { __decorate, __metadata } from 'tslib';
import { EventEmitter, Input, Output, Component, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

class PageState {
}
class PaginateOptions {
}
const defaults = {
    spanPages: 2,
    previousPage: true,
    nextPage: true,
    firstPage: true,
    lastPage: true,
    titles: {
        firstPage: 'First',
        previousPage: 'Previous',
        lastPage: 'Last',
        nextPage: 'Next',
        pageSize: 'Items per page'
    },
    pageSizes: [{
            value: 5,
            display: '5'
        }, {
            value: 10,
            display: '10'
        }, {
            value: 15,
            display: '15'
        }]
};
let NgxPaginateComponent = class NgxPaginateComponent {
    constructor() {
        this.pageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.range = [];
    }
    ngOnInit() {
        this.range = [];
        this.setOptions();
        this.calculateRange();
        // this.pageChange.emit(this.page);
    }
    setOptions() {
        if (!this.options) {
            this.options = defaults;
        }
        if (!this.options.titles) {
            this.options.titles = defaults.titles;
        }
        this.internalOptions = {
            spanPages: this.options.spanPages || defaults.spanPages,
            previousPage: this.options.previousPage !== undefined ? this.options.previousPage : defaults.previousPage,
            nextPage: this.options.nextPage !== undefined ? this.options.nextPage : defaults.nextPage,
            firstPage: this.options.firstPage !== undefined ? this.options.firstPage : defaults.firstPage,
            lastPage: this.options.lastPage !== undefined ? this.options.lastPage : defaults.lastPage,
            titles: {
                firstPage: this.options.titles.firstPage || defaults.titles.firstPage,
                previousPage: this.options.titles.previousPage || defaults.titles.previousPage,
                lastPage: this.options.titles.lastPage || defaults.titles.lastPage,
                nextPage: this.options.titles.nextPage || defaults.titles.nextPage,
                pageSize: this.options.titles.pageSize || defaults.titles.pageSize
            },
            pageSizes: this.options.pageSizes || defaults.pageSizes.slice()
        };
    }
    setPageSize(pageSize) {
        this.page.pageSize = parseInt(pageSize, 10);
        // this.pageChange.emit(this.page);
        this.pageSizeChange.emit(this.page);
    }
    calculateRange() {
        this.range.length = 0;
        this.page.numberOfPages = Math.ceil(this.page.totalItems / this.page.pageSize);
        if (this.page.numberOfPages === 0) {
            this.page.numberOfPages = 1;
        }
        let upperSpan;
        // if we can add span in front of current page, add it
        if (this.page.currentPage - this.options.spanPages > 0) {
            for (let i = this.page.currentPage - this.options.spanPages; i < this.page.currentPage; i++) {
                this.range.push(i);
            }
            upperSpan = this.options.spanPages;
        }
        else {
            // if not, add as much as you can after it and adjust upper span
            upperSpan = this.options.spanPages * 2;
            for (let i = 1; i < this.page.currentPage; i++) {
                this.range.push(i);
                upperSpan--;
            }
        }
        this.range.push(this.page.currentPage);
        if (this.page.currentPage + upperSpan <= this.page.numberOfPages) {
            for (let i = this.page.currentPage + 1; i <= this.page.currentPage + upperSpan; i++) {
                this.range.push(i);
            }
        }
        else {
            for (let i = this.page.currentPage + 1; i <= this.page.numberOfPages; i++) {
                this.range.push(i);
                upperSpan--;
            }
            if (upperSpan > 0) {
                // something is still left, prepend it to array (only if bigger than 0)
                while (upperSpan > 0 && this.range[0] - 1 > 0) {
                    this.range.unshift(this.range[0] - 1);
                    upperSpan--;
                }
            }
        }
    }
    setPage(page) {
        if (this.page.currentPage !== page) {
            this.page.currentPage = page;
            this.calculateRange();
            this.pageChange.emit(this.page);
        }
    }
    previousPage() {
        if (this.page.currentPage > 1) {
            this.setPage(this.page.currentPage - 1);
        }
    }
    nextPage() {
        if (this.page.currentPage < this.page.numberOfPages) {
            this.setPage(this.page.currentPage + 1);
        }
    }
    ngDoCheck() {
        if (this.page) {
            this.calculateRange();
        }
    }
    ngOnChanges(changes) {
        if (changes['options'] && changes['options'].currentValue) {
            this.setOptions();
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", PaginateOptions)
], NgxPaginateComponent.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", PageState)
], NgxPaginateComponent.prototype, "page", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NgxPaginateComponent.prototype, "pageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NgxPaginateComponent.prototype, "pageSizeChange", void 0);
NgxPaginateComponent = __decorate([
    Component({
        selector: 'ngx-paginate',
        template: "<div class=\"page-size-selection\">\n  <span>{{internalOptions.titles.pageSize}}</span>\n  <select (change)=\"setPageSize($event.target.value)\">\n    <option *ngFor=\"let opt of internalOptions.pageSizes\">{{opt.display}}</option>\n  </select>\n</div>\n<div class=\"pages\">\n  <span\n    class=\"first-page-button page-entry\"\n    *ngIf=\"internalOptions.firstPage\"\n    (click)=\"setPage(1)\"\n    [ngClass]=\"{'disabled':page.currentPage === 1}\">\n    {{internalOptions.titles.firstPage}}\n  </span>\n  <span\n    class=\"prev-button page-entry\"\n    *ngIf=\"internalOptions.previousPage\"\n    (click)=\"previousPage()\"\n    [ngClass]=\"{'disabled':page.currentPage === 1}\">\n    {{internalOptions.titles.previousPage}}\n  </span>\n  <span class=\"page-selection\">\n    <span\n      *ngFor=\"let num of range\"\n      class=\"page-entry\"\n      [ngClass]=\"{'active': num === page.currentPage}\"\n      (click)=\"setPage(num)\">{{num}}</span>\n  </span>\n  <span\n    class=\"next-button page-entry\"\n    *ngIf=\"internalOptions.nextPage\"\n    (click)=\"nextPage()\"\n    [ngClass]=\"{'disabled':page.currentPage === page.numberOfPages}\">\n      {{internalOptions.titles.nextPage}}\n  </span>\n  <span\n    class=\"last-page-button page-entry\"\n    *ngIf=\"internalOptions.lastPage\"\n    (click)=\"setPage(page.numberOfPages)\"\n    [ngClass]=\"{'disabled':page.currentPage === page.numberOfPages}\">\n    {{internalOptions.titles.lastPage}}\n  </span>\n</div>\n",
        styles: [":host{display:flex;width:100%;align-items:center;justify-content:space-between}.page-selection{display:flex;justify-content:center}select{height:30px}.pages{display:flex}.page-entry{height:30px;display:flex;align-items:center;justify-content:center;border:none;background-color:#eeedee;margin:0 1px;cursor:pointer;white-space:nowrap;min-width:14px;width:auto;padding:0 8px}.page-entry.active{color:#fff;background-color:#b6b6b6;cursor:default}.page-entry.disabled{opacity:.3;cursor:default}"]
    }),
    __metadata("design:paramtypes", [])
], NgxPaginateComponent);

let NgxPaginateModule = class NgxPaginateModule {
};
NgxPaginateModule = __decorate([
    NgModule({
        imports: [
            CommonModule
        ],
        exports: [NgxPaginateComponent],
        declarations: [NgxPaginateComponent]
    })
], NgxPaginateModule);

/**
 * Generated bundle index. Do not edit.
 */

export { NgxPaginateComponent, NgxPaginateModule, PageState, PaginateOptions };
//# sourceMappingURL=ngx-paginate.js.map
