import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
var PageState = /** @class */ (function () {
    function PageState() {
    }
    return PageState;
}());
export { PageState };
var PaginateOptions = /** @class */ (function () {
    function PaginateOptions() {
    }
    return PaginateOptions;
}());
export { PaginateOptions };
var defaults = {
    spanPages: 2,
    previousPage: true,
    nextPage: true,
    firstPage: true,
    lastPage: true,
    titles: {
        firstPage: 'First',
        previousPage: 'Previous',
        lastPage: 'Last',
        nextPage: 'Next',
        pageSize: 'Items per page'
    },
    pageSizes: [{
            value: 5,
            display: '5'
        }, {
            value: 10,
            display: '10'
        }, {
            value: 15,
            display: '15'
        }]
};
var NgxPaginateComponent = /** @class */ (function () {
    function NgxPaginateComponent() {
        this.pageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.range = [];
    }
    NgxPaginateComponent.prototype.ngOnInit = function () {
        this.range = [];
        this.setOptions();
        this.calculateRange();
        // this.pageChange.emit(this.page);
    };
    NgxPaginateComponent.prototype.setOptions = function () {
        if (!this.options) {
            this.options = defaults;
        }
        if (!this.options.titles) {
            this.options.titles = defaults.titles;
        }
        this.internalOptions = {
            spanPages: this.options.spanPages || defaults.spanPages,
            previousPage: this.options.previousPage !== undefined ? this.options.previousPage : defaults.previousPage,
            nextPage: this.options.nextPage !== undefined ? this.options.nextPage : defaults.nextPage,
            firstPage: this.options.firstPage !== undefined ? this.options.firstPage : defaults.firstPage,
            lastPage: this.options.lastPage !== undefined ? this.options.lastPage : defaults.lastPage,
            titles: {
                firstPage: this.options.titles.firstPage || defaults.titles.firstPage,
                previousPage: this.options.titles.previousPage || defaults.titles.previousPage,
                lastPage: this.options.titles.lastPage || defaults.titles.lastPage,
                nextPage: this.options.titles.nextPage || defaults.titles.nextPage,
                pageSize: this.options.titles.pageSize || defaults.titles.pageSize
            },
            pageSizes: this.options.pageSizes || defaults.pageSizes.slice()
        };
    };
    NgxPaginateComponent.prototype.setPageSize = function (pageSize) {
        this.page.pageSize = parseInt(pageSize, 10);
        // this.pageChange.emit(this.page);
        this.pageSizeChange.emit(this.page);
    };
    NgxPaginateComponent.prototype.calculateRange = function () {
        this.range.length = 0;
        this.page.numberOfPages = Math.ceil(this.page.totalItems / this.page.pageSize);
        if (this.page.numberOfPages === 0) {
            this.page.numberOfPages = 1;
        }
        var upperSpan;
        // if we can add span in front of current page, add it
        if (this.page.currentPage - this.options.spanPages > 0) {
            for (var i = this.page.currentPage - this.options.spanPages; i < this.page.currentPage; i++) {
                this.range.push(i);
            }
            upperSpan = this.options.spanPages;
        }
        else {
            // if not, add as much as you can after it and adjust upper span
            upperSpan = this.options.spanPages * 2;
            for (var i = 1; i < this.page.currentPage; i++) {
                this.range.push(i);
                upperSpan--;
            }
        }
        this.range.push(this.page.currentPage);
        if (this.page.currentPage + upperSpan <= this.page.numberOfPages) {
            for (var i = this.page.currentPage + 1; i <= this.page.currentPage + upperSpan; i++) {
                this.range.push(i);
            }
        }
        else {
            for (var i = this.page.currentPage + 1; i <= this.page.numberOfPages; i++) {
                this.range.push(i);
                upperSpan--;
            }
            if (upperSpan > 0) {
                // something is still left, prepend it to array (only if bigger than 0)
                while (upperSpan > 0 && this.range[0] - 1 > 0) {
                    this.range.unshift(this.range[0] - 1);
                    upperSpan--;
                }
            }
        }
    };
    NgxPaginateComponent.prototype.setPage = function (page) {
        if (this.page.currentPage !== page) {
            this.page.currentPage = page;
            this.calculateRange();
            this.pageChange.emit(this.page);
        }
    };
    NgxPaginateComponent.prototype.previousPage = function () {
        if (this.page.currentPage > 1) {
            this.setPage(this.page.currentPage - 1);
        }
    };
    NgxPaginateComponent.prototype.nextPage = function () {
        if (this.page.currentPage < this.page.numberOfPages) {
            this.setPage(this.page.currentPage + 1);
        }
    };
    NgxPaginateComponent.prototype.ngDoCheck = function () {
        if (this.page) {
            this.calculateRange();
        }
    };
    NgxPaginateComponent.prototype.ngOnChanges = function (changes) {
        if (changes['options'] && changes['options'].currentValue) {
            this.setOptions();
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", PaginateOptions)
    ], NgxPaginateComponent.prototype, "options", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", PageState)
    ], NgxPaginateComponent.prototype, "page", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], NgxPaginateComponent.prototype, "pageChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], NgxPaginateComponent.prototype, "pageSizeChange", void 0);
    NgxPaginateComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-paginate',
            template: "<div class=\"page-size-selection\">\n  <span>{{internalOptions.titles.pageSize}}</span>\n  <select (change)=\"setPageSize($event.target.value)\">\n    <option *ngFor=\"let opt of internalOptions.pageSizes\">{{opt.display}}</option>\n  </select>\n</div>\n<div class=\"pages\">\n  <span\n    class=\"first-page-button page-entry\"\n    *ngIf=\"internalOptions.firstPage\"\n    (click)=\"setPage(1)\"\n    [ngClass]=\"{'disabled':page.currentPage === 1}\">\n    {{internalOptions.titles.firstPage}}\n  </span>\n  <span\n    class=\"prev-button page-entry\"\n    *ngIf=\"internalOptions.previousPage\"\n    (click)=\"previousPage()\"\n    [ngClass]=\"{'disabled':page.currentPage === 1}\">\n    {{internalOptions.titles.previousPage}}\n  </span>\n  <span class=\"page-selection\">\n    <span\n      *ngFor=\"let num of range\"\n      class=\"page-entry\"\n      [ngClass]=\"{'active': num === page.currentPage}\"\n      (click)=\"setPage(num)\">{{num}}</span>\n  </span>\n  <span\n    class=\"next-button page-entry\"\n    *ngIf=\"internalOptions.nextPage\"\n    (click)=\"nextPage()\"\n    [ngClass]=\"{'disabled':page.currentPage === page.numberOfPages}\">\n      {{internalOptions.titles.nextPage}}\n  </span>\n  <span\n    class=\"last-page-button page-entry\"\n    *ngIf=\"internalOptions.lastPage\"\n    (click)=\"setPage(page.numberOfPages)\"\n    [ngClass]=\"{'disabled':page.currentPage === page.numberOfPages}\">\n    {{internalOptions.titles.lastPage}}\n  </span>\n</div>\n",
            styles: [":host{display:flex;width:100%;align-items:center;justify-content:space-between}.page-selection{display:flex;justify-content:center}select{height:30px}.pages{display:flex}.page-entry{height:30px;display:flex;align-items:center;justify-content:center;border:none;background-color:#eeedee;margin:0 1px;cursor:pointer;white-space:nowrap;min-width:14px;width:auto;padding:0 8px}.page-entry.active{color:#fff;background-color:#b6b6b6;cursor:default}.page-entry.disabled{opacity:.3;cursor:default}"]
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], NgxPaginateComponent);
    return NgxPaginateComponent;
}());
export { NgxPaginateComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBhZ2luYXRlLyIsInNvdXJjZXMiOlsic3JjL2FwcC9wYWdpbmF0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVcsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVsSDtJQUFBO0lBS0EsQ0FBQztJQUFELGdCQUFDO0FBQUQsQ0FBQyxBQUxELElBS0M7O0FBRUQ7SUFBQTtJQWlCQSxDQUFDO0lBQUQsc0JBQUM7QUFBRCxDQUFDLEFBakJELElBaUJDOztBQUVELElBQU0sUUFBUSxHQUFvQjtJQUNoQyxTQUFTLEVBQUcsQ0FBQztJQUNiLFlBQVksRUFBRSxJQUFJO0lBQ2xCLFFBQVEsRUFBRSxJQUFJO0lBQ2QsU0FBUyxFQUFFLElBQUk7SUFDZixRQUFRLEVBQUUsSUFBSTtJQUNkLE1BQU0sRUFBRTtRQUNOLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLFlBQVksRUFBRSxVQUFVO1FBQ3hCLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLFFBQVEsRUFBRSxnQkFBZ0I7S0FDM0I7SUFDRCxTQUFTLEVBQUUsQ0FBQztZQUNWLEtBQUssRUFBRSxDQUFDO1lBQ1IsT0FBTyxFQUFFLEdBQUc7U0FDYixFQUFFO1lBQ0QsS0FBSyxFQUFFLEVBQUU7WUFDVCxPQUFPLEVBQUUsSUFBSTtTQUNkLEVBQUU7WUFDRCxLQUFLLEVBQUUsRUFBRTtZQUNULE9BQU8sRUFBRSxJQUFJO1NBQ2QsQ0FBQztDQUNILENBQUM7QUFPRjtJQVNFO1FBSFUsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFhLENBQUM7UUFDM0MsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBYSxDQUFDO1FBR3ZELElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFHRCx1Q0FBUSxHQUFS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QUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUM7SUFFRCx1Q0FBUSxHQUFSO1FBQ0UsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQztJQUVELHdDQUFTLEdBQVQ7UUFDRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRUQsMENBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLEVBQUU7WUFDekQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQztJQWhJUTtRQUFSLEtBQUssRUFBRTswQ0FBVSxlQUFlO3lEQUFDO0lBRXpCO1FBQVIsS0FBSyxFQUFFOzBDQUFPLFNBQVM7c0RBQUM7SUFDZjtRQUFULE1BQU0sRUFBRTs7NERBQTRDO0lBQzNDO1FBQVQsTUFBTSxFQUFFOztnRUFBZ0Q7SUFQOUMsb0JBQW9CO1FBTGhDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxjQUFjO1lBQ3hCLG85Q0FBd0M7O1NBRXpDLENBQUM7O09BQ1csb0JBQW9CLENBb0loQztJQUFELDJCQUFDO0NBQUEsQUFwSUQsSUFvSUM7U0FwSVksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEb0NoZWNrLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBQYWdlU3RhdGUge1xuICBjdXJyZW50UGFnZTogbnVtYmVyO1xuICBwYWdlU2l6ZTogbnVtYmVyO1xuICB0b3RhbEl0ZW1zPzogbnVtYmVyO1xuICBudW1iZXJPZlBhZ2VzPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgUGFnaW5hdGVPcHRpb25zIHtcbiAgc3BhblBhZ2VzPzogbnVtYmVyOyAvLyAgbnVtYmVyIG9mIGhvdyBtYW55IHBhZ2VzIGFkZGl0aW9uYWxseSB3aWxsIGJlIHNob3duIG9uIGxlZnQgYW5kIHJpZ2h0XG4gIGZpcnN0UGFnZT86IGJvb2xlYW47XG4gIHByZXZpb3VzUGFnZT86IGJvb2xlYW47XG4gIG5leHRQYWdlPzogYm9vbGVhbjtcbiAgbGFzdFBhZ2U/OiBib29sZWFuO1xuICBwYWdlU2l6ZXM/OiB7XG4gICAgdmFsdWU6IG51bWJlcixcbiAgICBkaXNwbGF5OiBzdHJpbmdcbiAgfVtdO1xuICB0aXRsZXM/OiB7XG4gICAgZmlyc3RQYWdlPzogc3RyaW5nO1xuICAgIGxhc3RQYWdlPzogc3RyaW5nO1xuICAgIHByZXZpb3VzUGFnZT86IHN0cmluZztcbiAgICBuZXh0UGFnZT86IHN0cmluZztcbiAgICBwYWdlU2l6ZT86IHN0cmluZztcbiAgfTtcbn1cblxuY29uc3QgZGVmYXVsdHM6IFBhZ2luYXRlT3B0aW9ucyA9IHtcbiAgc3BhblBhZ2VzIDogMixcbiAgcHJldmlvdXNQYWdlOiB0cnVlLFxuICBuZXh0UGFnZTogdHJ1ZSxcbiAgZmlyc3RQYWdlOiB0cnVlLFxuICBsYXN0UGFnZTogdHJ1ZSxcbiAgdGl0bGVzOiB7XG4gICAgZmlyc3RQYWdlOiAnRmlyc3QnLFxuICAgIHByZXZpb3VzUGFnZTogJ1ByZXZpb3VzJyxcbiAgICBsYXN0UGFnZTogJ0xhc3QnLFxuICAgIG5leHRQYWdlOiAnTmV4dCcsXG4gICAgcGFnZVNpemU6ICdJdGVtcyBwZXIgcGFnZSdcbiAgfSxcbiAgcGFnZVNpemVzOiBbe1xuICAgIHZhbHVlOiA1LFxuICAgIGRpc3BsYXk6ICc1J1xuICB9LCB7XG4gICAgdmFsdWU6IDEwLFxuICAgIGRpc3BsYXk6ICcxMCdcbiAgfSwge1xuICAgIHZhbHVlOiAxNSxcbiAgICBkaXNwbGF5OiAnMTUnXG4gIH1dXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtcGFnaW5hdGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFnaW5hdGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wYWdpbmF0ZS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE5neFBhZ2luYXRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBEb0NoZWNrLCBPbkNoYW5nZXMge1xuXG4gIGludGVybmFsT3B0aW9uczogUGFnaW5hdGVPcHRpb25zO1xuICBASW5wdXQoKSBvcHRpb25zOiBQYWdpbmF0ZU9wdGlvbnM7XG5cbiAgQElucHV0KCkgcGFnZTogUGFnZVN0YXRlO1xuICBAT3V0cHV0KCkgcGFnZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8UGFnZVN0YXRlPigpO1xuICBAT3V0cHV0KCkgcGFnZVNpemVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPFBhZ2VTdGF0ZT4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJhbmdlID0gW107XG4gIH1cblxuICByYW5nZTogbnVtYmVyW107XG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmFuZ2UgPSBbXTtcbiAgICB0aGlzLnNldE9wdGlvbnMoKTtcblxuICAgIHRoaXMuY2FsY3VsYXRlUmFuZ2UoKTtcbiAgICAvLyB0aGlzLnBhZ2VDaGFuZ2UuZW1pdCh0aGlzLnBhZ2UpO1xuICB9XG5cbiAgc2V0T3B0aW9ucygpIHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucykge1xuICAgICAgdGhpcy5vcHRpb25zID0gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudGl0bGVzKSB7XG4gICAgICB0aGlzLm9wdGlvbnMudGl0bGVzID0gZGVmYXVsdHMudGl0bGVzO1xuICAgIH1cbiAgICB0aGlzLmludGVybmFsT3B0aW9ucyA9IHtcbiAgICAgIHNwYW5QYWdlczogdGhpcy5vcHRpb25zLnNwYW5QYWdlcyB8fCBkZWZhdWx0cy5zcGFuUGFnZXMsXG4gICAgICBwcmV2aW91c1BhZ2U6IHRoaXMub3B0aW9ucy5wcmV2aW91c1BhZ2UgIT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9ucy5wcmV2aW91c1BhZ2UgOiBkZWZhdWx0cy5wcmV2aW91c1BhZ2UsXG4gICAgICBuZXh0UGFnZTogdGhpcy5vcHRpb25zLm5leHRQYWdlICE9PSB1bmRlZmluZWQgPyB0aGlzLm9wdGlvbnMubmV4dFBhZ2UgOiBkZWZhdWx0cy5uZXh0UGFnZSxcbiAgICAgIGZpcnN0UGFnZTogdGhpcy5vcHRpb25zLmZpcnN0UGFnZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5vcHRpb25zLmZpcnN0UGFnZSA6IGRlZmF1bHRzLmZpcnN0UGFnZSxcbiAgICAgIGxhc3RQYWdlOiB0aGlzLm9wdGlvbnMubGFzdFBhZ2UgIT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9ucy5sYXN0UGFnZSA6IGRlZmF1bHRzLmxhc3RQYWdlLFxuICAgICAgdGl0bGVzOiB7XG4gICAgICAgIGZpcnN0UGFnZTogdGhpcy5vcHRpb25zLnRpdGxlcy5maXJzdFBhZ2UgfHwgZGVmYXVsdHMudGl0bGVzLmZpcnN0UGFnZSxcbiAgICAgICAgcHJldmlvdXNQYWdlOiB0aGlzLm9wdGlvbnMudGl0bGVzLnByZXZpb3VzUGFnZSB8fCBkZWZhdWx0cy50aXRsZXMucHJldmlvdXNQYWdlLFxuICAgICAgICBsYXN0UGFnZTogdGhpcy5vcHRpb25zLnRpdGxlcy5sYXN0UGFnZSB8fCBkZWZhdWx0cy50aXRsZXMubGFzdFBhZ2UsXG4gICAgICAgIG5leHRQYWdlOiB0aGlzLm9wdGlvbnMudGl0bGVzLm5leHRQYWdlIHx8IGRlZmF1bHRzLnRpdGxlcy5uZXh0UGFnZSxcbiAgICAgICAgcGFnZVNpemU6IHRoaXMub3B0aW9ucy50aXRsZXMucGFnZVNpemUgfHwgZGVmYXVsdHMudGl0bGVzLnBhZ2VTaXplXG4gICAgICB9LFxuICAgICAgcGFnZVNpemVzOiB0aGlzLm9wdGlvbnMucGFnZVNpemVzIHx8IGRlZmF1bHRzLnBhZ2VTaXplcy5zbGljZSgpXG4gICAgfTtcbiAgfVxuXG4gIHNldFBhZ2VTaXplKHBhZ2VTaXplKSB7XG4gICAgdGhpcy5wYWdlLnBhZ2VTaXplID0gcGFyc2VJbnQocGFnZVNpemUsIDEwKTtcbiAgICAvLyB0aGlzLnBhZ2VDaGFuZ2UuZW1pdCh0aGlzLnBhZ2UpO1xuICAgIHRoaXMucGFnZVNpemVDaGFuZ2UuZW1pdCh0aGlzLnBhZ2UpO1xuICB9XG5cbiAgY2FsY3VsYXRlUmFuZ2UoKSB7XG4gICAgdGhpcy5yYW5nZS5sZW5ndGggPSAwO1xuICAgIHRoaXMucGFnZS5udW1iZXJPZlBhZ2VzID0gTWF0aC5jZWlsKHRoaXMucGFnZS50b3RhbEl0ZW1zIC8gdGhpcy5wYWdlLnBhZ2VTaXplKTtcblxuICAgIGlmICh0aGlzLnBhZ2UubnVtYmVyT2ZQYWdlcyA9PT0gMCkge1xuICAgICAgdGhpcy5wYWdlLm51bWJlck9mUGFnZXMgPSAxO1xuICAgIH1cbiAgICBsZXQgdXBwZXJTcGFuO1xuXG4gICAgLy8gaWYgd2UgY2FuIGFkZCBzcGFuIGluIGZyb250IG9mIGN1cnJlbnQgcGFnZSwgYWRkIGl0XG4gICAgaWYgKHRoaXMucGFnZS5jdXJyZW50UGFnZSAtIHRoaXMub3B0aW9ucy5zcGFuUGFnZXMgPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5wYWdlLmN1cnJlbnRQYWdlIC0gdGhpcy5vcHRpb25zLnNwYW5QYWdlczsgaSA8IHRoaXMucGFnZS5jdXJyZW50UGFnZTsgaSsrKSB7XG4gICAgICAgIHRoaXMucmFuZ2UucHVzaChpKTtcbiAgICAgIH1cbiAgICAgIHVwcGVyU3BhbiA9IHRoaXMub3B0aW9ucy5zcGFuUGFnZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIG5vdCwgYWRkIGFzIG11Y2ggYXMgeW91IGNhbiBhZnRlciBpdCBhbmQgYWRqdXN0IHVwcGVyIHNwYW5cbiAgICAgIHVwcGVyU3BhbiA9IHRoaXMub3B0aW9ucy5zcGFuUGFnZXMgKiAyO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLnBhZ2UuY3VycmVudFBhZ2U7IGkrKykge1xuICAgICAgICB0aGlzLnJhbmdlLnB1c2goaSk7XG4gICAgICAgIHVwcGVyU3Bhbi0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucmFuZ2UucHVzaCh0aGlzLnBhZ2UuY3VycmVudFBhZ2UpO1xuXG4gICAgaWYgKHRoaXMucGFnZS5jdXJyZW50UGFnZSArIHVwcGVyU3BhbiA8PSB0aGlzLnBhZ2UubnVtYmVyT2ZQYWdlcykge1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMucGFnZS5jdXJyZW50UGFnZSArIDE7IGkgPD0gdGhpcy5wYWdlLmN1cnJlbnRQYWdlICsgdXBwZXJTcGFuOyBpKyspIHtcbiAgICAgICAgdGhpcy5yYW5nZS5wdXNoKGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5wYWdlLmN1cnJlbnRQYWdlICsgMTsgaSA8PSB0aGlzLnBhZ2UubnVtYmVyT2ZQYWdlczsgaSsrKSB7XG4gICAgICAgIHRoaXMucmFuZ2UucHVzaChpKTtcbiAgICAgICAgdXBwZXJTcGFuLS07XG4gICAgICB9XG5cbiAgICAgIGlmICh1cHBlclNwYW4gPiAwICkge1xuICAgICAgICAvLyBzb21ldGhpbmcgaXMgc3RpbGwgbGVmdCwgcHJlcGVuZCBpdCB0byBhcnJheSAob25seSBpZiBiaWdnZXIgdGhhbiAwKVxuICAgICAgICB3aGlsZSAodXBwZXJTcGFuID4gMCAmJiB0aGlzLnJhbmdlWzBdIC0gMSA+IDApIHtcbiAgICAgICAgICB0aGlzLnJhbmdlLnVuc2hpZnQodGhpcy5yYW5nZVswXSAtIDEpO1xuICAgICAgICAgIHVwcGVyU3Bhbi0tO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIHNldFBhZ2UocGFnZTogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucGFnZS5jdXJyZW50UGFnZSAhPT0gcGFnZSkge1xuICAgICAgdGhpcy5wYWdlLmN1cnJlbnRQYWdlID0gcGFnZTtcbiAgICAgIHRoaXMuY2FsY3VsYXRlUmFuZ2UoKTtcbiAgICAgIHRoaXMucGFnZUNoYW5nZS5lbWl0KHRoaXMucGFnZSk7XG4gICAgfVxuICB9XG5cbiAgcHJldmlvdXNQYWdlKCkge1xuICAgIGlmICh0aGlzLnBhZ2UuY3VycmVudFBhZ2UgPiAxKSB7XG4gICAgICB0aGlzLnNldFBhZ2UodGhpcy5wYWdlLmN1cnJlbnRQYWdlIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgbmV4dFBhZ2UoKSB7XG4gICAgaWYgKHRoaXMucGFnZS5jdXJyZW50UGFnZSA8IHRoaXMucGFnZS5udW1iZXJPZlBhZ2VzKSB7XG4gICAgICB0aGlzLnNldFBhZ2UodGhpcy5wYWdlLmN1cnJlbnRQYWdlICsgMSk7XG4gICAgfVxuICB9XG5cbiAgbmdEb0NoZWNrKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnBhZ2UpIHtcbiAgICAgIHRoaXMuY2FsY3VsYXRlUmFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXNbJ29wdGlvbnMnXSAmJiBjaGFuZ2VzWydvcHRpb25zJ10uY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLnNldE9wdGlvbnMoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==