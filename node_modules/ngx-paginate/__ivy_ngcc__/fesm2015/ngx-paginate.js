import { __decorate, __metadata } from 'tslib';
import { EventEmitter, Input, Output, Component, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NgxPaginateComponent_option_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const opt_r6 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(opt_r6.display);
} }
const _c0 = function (a0) { return { "disabled": a0 }; };
function NgxPaginateComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵlistener("click", function NgxPaginateComponent_span_6_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r7.setPage(1)); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r1.page.currentPage === 1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.internalOptions.titles.firstPage, " ");
} }
function NgxPaginateComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 11);
    ɵngcc0.ɵɵlistener("click", function NgxPaginateComponent_span_7_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r9.previousPage()); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r2.page.currentPage === 1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.internalOptions.titles.previousPage, " ");
} }
const _c1 = function (a0) { return { "active": a0 }; };
function NgxPaginateComponent_span_9_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 12);
    ɵngcc0.ɵɵlistener("click", function NgxPaginateComponent_span_9_Template_span_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r13); const num_r11 = restoredCtx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r12.setPage(num_r11)); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const num_r11 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c1, num_r11 === ctx_r3.page.currentPage));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(num_r11);
} }
function NgxPaginateComponent_span_10_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 13);
    ɵngcc0.ɵɵlistener("click", function NgxPaginateComponent_span_10_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r14.nextPage()); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r4.page.currentPage === ctx_r4.page.numberOfPages));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.internalOptions.titles.nextPage, " ");
} }
function NgxPaginateComponent_span_11_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵlistener("click", function NgxPaginateComponent_span_11_Template_span_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r16.setPage(ctx_r16.page.numberOfPages)); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r5.page.currentPage === ctx_r5.page.numberOfPages));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r5.internalOptions.titles.lastPage, " ");
} }
class PageState {
}
class PaginateOptions {
}
const defaults = {
    spanPages: 2,
    previousPage: true,
    nextPage: true,
    firstPage: true,
    lastPage: true,
    titles: {
        firstPage: 'First',
        previousPage: 'Previous',
        lastPage: 'Last',
        nextPage: 'Next',
        pageSize: 'Items per page'
    },
    pageSizes: [{
            value: 5,
            display: '5'
        }, {
            value: 10,
            display: '10'
        }, {
            value: 15,
            display: '15'
        }]
};
let NgxPaginateComponent = class NgxPaginateComponent {
    constructor() {
        this.pageChange = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.range = [];
    }
    ngOnInit() {
        this.range = [];
        this.setOptions();
        this.calculateRange();
        // this.pageChange.emit(this.page);
    }
    setOptions() {
        if (!this.options) {
            this.options = defaults;
        }
        if (!this.options.titles) {
            this.options.titles = defaults.titles;
        }
        this.internalOptions = {
            spanPages: this.options.spanPages || defaults.spanPages,
            previousPage: this.options.previousPage !== undefined ? this.options.previousPage : defaults.previousPage,
            nextPage: this.options.nextPage !== undefined ? this.options.nextPage : defaults.nextPage,
            firstPage: this.options.firstPage !== undefined ? this.options.firstPage : defaults.firstPage,
            lastPage: this.options.lastPage !== undefined ? this.options.lastPage : defaults.lastPage,
            titles: {
                firstPage: this.options.titles.firstPage || defaults.titles.firstPage,
                previousPage: this.options.titles.previousPage || defaults.titles.previousPage,
                lastPage: this.options.titles.lastPage || defaults.titles.lastPage,
                nextPage: this.options.titles.nextPage || defaults.titles.nextPage,
                pageSize: this.options.titles.pageSize || defaults.titles.pageSize
            },
            pageSizes: this.options.pageSizes || defaults.pageSizes.slice()
        };
    }
    setPageSize(pageSize) {
        this.page.pageSize = parseInt(pageSize, 10);
        // this.pageChange.emit(this.page);
        this.pageSizeChange.emit(this.page);
    }
    calculateRange() {
        this.range.length = 0;
        this.page.numberOfPages = Math.ceil(this.page.totalItems / this.page.pageSize);
        if (this.page.numberOfPages === 0) {
            this.page.numberOfPages = 1;
        }
        let upperSpan;
        // if we can add span in front of current page, add it
        if (this.page.currentPage - this.options.spanPages > 0) {
            for (let i = this.page.currentPage - this.options.spanPages; i < this.page.currentPage; i++) {
                this.range.push(i);
            }
            upperSpan = this.options.spanPages;
        }
        else {
            // if not, add as much as you can after it and adjust upper span
            upperSpan = this.options.spanPages * 2;
            for (let i = 1; i < this.page.currentPage; i++) {
                this.range.push(i);
                upperSpan--;
            }
        }
        this.range.push(this.page.currentPage);
        if (this.page.currentPage + upperSpan <= this.page.numberOfPages) {
            for (let i = this.page.currentPage + 1; i <= this.page.currentPage + upperSpan; i++) {
                this.range.push(i);
            }
        }
        else {
            for (let i = this.page.currentPage + 1; i <= this.page.numberOfPages; i++) {
                this.range.push(i);
                upperSpan--;
            }
            if (upperSpan > 0) {
                // something is still left, prepend it to array (only if bigger than 0)
                while (upperSpan > 0 && this.range[0] - 1 > 0) {
                    this.range.unshift(this.range[0] - 1);
                    upperSpan--;
                }
            }
        }
    }
    setPage(page) {
        if (this.page.currentPage !== page) {
            this.page.currentPage = page;
            this.calculateRange();
            this.pageChange.emit(this.page);
        }
    }
    previousPage() {
        if (this.page.currentPage > 1) {
            this.setPage(this.page.currentPage - 1);
        }
    }
    nextPage() {
        if (this.page.currentPage < this.page.numberOfPages) {
            this.setPage(this.page.currentPage + 1);
        }
    }
    ngDoCheck() {
        if (this.page) {
            this.calculateRange();
        }
    }
    ngOnChanges(changes) {
        if (changes['options'] && changes['options'].currentValue) {
            this.setOptions();
        }
    }
};
NgxPaginateComponent.ɵfac = function NgxPaginateComponent_Factory(t) { return new (t || NgxPaginateComponent)(); };
NgxPaginateComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxPaginateComponent, selectors: [["ngx-paginate"]], inputs: { options: "options", page: "page" }, outputs: { pageChange: "pageChange", pageSizeChange: "pageSizeChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 12, vars: 7, consts: [[1, "page-size-selection"], [3, "change"], [4, "ngFor", "ngForOf"], [1, "pages"], ["class", "first-page-button page-entry", 3, "ngClass", "click", 4, "ngIf"], ["class", "prev-button page-entry", 3, "ngClass", "click", 4, "ngIf"], [1, "page-selection"], ["class", "page-entry", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["class", "next-button page-entry", 3, "ngClass", "click", 4, "ngIf"], ["class", "last-page-button page-entry", 3, "ngClass", "click", 4, "ngIf"], [1, "first-page-button", "page-entry", 3, "ngClass", "click"], [1, "prev-button", "page-entry", 3, "ngClass", "click"], [1, "page-entry", 3, "ngClass", "click"], [1, "next-button", "page-entry", 3, "ngClass", "click"], [1, "last-page-button", "page-entry", 3, "ngClass", "click"]], template: function NgxPaginateComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "span");
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "select", 1);
        ɵngcc0.ɵɵlistener("change", function NgxPaginateComponent_Template_select_change_3_listener($event) { return ctx.setPageSize($event.target.value); });
        ɵngcc0.ɵɵtemplate(4, NgxPaginateComponent_option_4_Template, 2, 1, "option", 2);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵtemplate(6, NgxPaginateComponent_span_6_Template, 2, 4, "span", 4);
        ɵngcc0.ɵɵtemplate(7, NgxPaginateComponent_span_7_Template, 2, 4, "span", 5);
        ɵngcc0.ɵɵelementStart(8, "span", 6);
        ɵngcc0.ɵɵtemplate(9, NgxPaginateComponent_span_9_Template, 2, 4, "span", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, NgxPaginateComponent_span_10_Template, 2, 4, "span", 8);
        ɵngcc0.ɵɵtemplate(11, NgxPaginateComponent_span_11_Template, 2, 4, "span", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.internalOptions.titles.pageSize);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.internalOptions.pageSizes);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.internalOptions.firstPage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.internalOptions.previousPage);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.range);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.internalOptions.nextPage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.internalOptions.lastPage);
    } }, dependencies: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf], styles: ["[_nghost-%COMP%]{display:flex;width:100%;align-items:center;justify-content:space-between}.page-selection[_ngcontent-%COMP%]{display:flex;justify-content:center}select[_ngcontent-%COMP%]{height:30px}.pages[_ngcontent-%COMP%]{display:flex}.page-entry[_ngcontent-%COMP%]{height:30px;display:flex;align-items:center;justify-content:center;border:none;background-color:#eeedee;margin:0 1px;cursor:pointer;white-space:nowrap;min-width:14px;width:auto;padding:0 8px}.page-entry.active[_ngcontent-%COMP%]{color:#fff;background-color:#b6b6b6;cursor:default}.page-entry.disabled[_ngcontent-%COMP%]{opacity:.3;cursor:default}"] });
__decorate([
    Input(),
    __metadata("design:type", PaginateOptions)
], NgxPaginateComponent.prototype, "options", void 0);
__decorate([
    Input(),
    __metadata("design:type", PageState)
], NgxPaginateComponent.prototype, "page", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NgxPaginateComponent.prototype, "pageChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], NgxPaginateComponent.prototype, "pageSizeChange", void 0);
NgxPaginateComponent = __decorate([ __metadata("design:paramtypes", [])
], NgxPaginateComponent);

let NgxPaginateModule = class NgxPaginateModule {
};
NgxPaginateModule.ɵfac = function NgxPaginateModule_Factory(t) { return new (t || NgxPaginateModule)(); };
NgxPaginateModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxPaginateModule });
NgxPaginateModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPaginateComponent, [{
        type: Component,
        args: [{ selector: 'ngx-paginate', template: "<div class=\"page-size-selection\">\n  <span>{{internalOptions.titles.pageSize}}</span>\n  <select (change)=\"setPageSize($event.target.value)\">\n    <option *ngFor=\"let opt of internalOptions.pageSizes\">{{opt.display}}</option>\n  </select>\n</div>\n<div class=\"pages\">\n  <span\n    class=\"first-page-button page-entry\"\n    *ngIf=\"internalOptions.firstPage\"\n    (click)=\"setPage(1)\"\n    [ngClass]=\"{'disabled':page.currentPage === 1}\">\n    {{internalOptions.titles.firstPage}}\n  </span>\n  <span\n    class=\"prev-button page-entry\"\n    *ngIf=\"internalOptions.previousPage\"\n    (click)=\"previousPage()\"\n    [ngClass]=\"{'disabled':page.currentPage === 1}\">\n    {{internalOptions.titles.previousPage}}\n  </span>\n  <span class=\"page-selection\">\n    <span\n      *ngFor=\"let num of range\"\n      class=\"page-entry\"\n      [ngClass]=\"{'active': num === page.currentPage}\"\n      (click)=\"setPage(num)\">{{num}}</span>\n  </span>\n  <span\n    class=\"next-button page-entry\"\n    *ngIf=\"internalOptions.nextPage\"\n    (click)=\"nextPage()\"\n    [ngClass]=\"{'disabled':page.currentPage === page.numberOfPages}\">\n      {{internalOptions.titles.nextPage}}\n  </span>\n  <span\n    class=\"last-page-button page-entry\"\n    *ngIf=\"internalOptions.lastPage\"\n    (click)=\"setPage(page.numberOfPages)\"\n    [ngClass]=\"{'disabled':page.currentPage === page.numberOfPages}\">\n    {{internalOptions.titles.lastPage}}\n  </span>\n</div>\n", styles: [":host{display:flex;width:100%;align-items:center;justify-content:space-between}.page-selection{display:flex;justify-content:center}select{height:30px}.pages{display:flex}.page-entry{height:30px;display:flex;align-items:center;justify-content:center;border:none;background-color:#eeedee;margin:0 1px;cursor:pointer;white-space:nowrap;min-width:14px;width:auto;padding:0 8px}.page-entry.active{color:#fff;background-color:#b6b6b6;cursor:default}.page-entry.disabled{opacity:.3;cursor:default}"] }]
    }], function () { return []; }, { pageChange: [{
            type: Output
        }], pageSizeChange: [{
            type: Output
        }], options: [{
            type: Input
        }], page: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPaginateModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                exports: [NgxPaginateComponent],
                declarations: [NgxPaginateComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPaginateModule, { declarations: function () { return [NgxPaginateComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxPaginateComponent]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { NgxPaginateComponent, NgxPaginateModule, PageState, PaginateOptions };

//# sourceMappingURL=ngx-paginate.js.map